## Estructuras de Datos


##                                  LISTAS



#1) Crear una lista que contenga nombres de ciudades del 
# mundo que contenga más de 5 elementos e imprimir por pantalla

list_ciudades = ['Barcelona','Monaco','Bolonia','Roma','Amsterdam','London','Belgium','Paris','Ibiza']
print(list_ciudades)



#2) Imprimir por pantalla el segundo elemento de la lista

print(list_ciudades[1])

#3) Imprimir por pantalla del segundo al cuarto elemento


print(list_ciudades[1:5])

#4) Visualizar el tipo de dato de la lista
print(type(list_ciudades))


#5) Visualizar todos los elementos de la lista 
# a partir del tercero de manera genérica, es decir, 
# sin explicitar la posición del último elemento

print(list_ciudades[2:])



#6) Visualizar los primeros 4 elementos de la lista

print(list_ciudades[0:4])

#7) Agregar una ciudad más a la lista que ya exista y otra que no 
# ¿Arroja algún tipo de error?

list_ciudades.append('Bogota')
print (list_ciudades)

#arroja error por no sumarlo como cadena de lista [ _ , _ ] y 
#Tambien arroja error por no ser un valor string necesita ser conv a str( _ ).

#8) Agregar otra ciudad, pero en la cuarta posición

print(list_ciudades)
list_ciudades.insert(4,str('Cape Town'))
print(list_ciudades)


#9) Concatenar otra lista a la ya creada

add_list2 = ['ketchup','Mostaza'] 
list_ciudades.extend(add_list2)
print (list_ciudades)


#10) Encontrar el índice de la ciudad que en el punto 7 agregamos duplicada. 
# ¿Se nota alguna particularidad?

print(list_ciudades.index('Bogota'))
print(list_ciudades)


#12) Eliminar un elemento de la lista

list_ciudades.remove('Roma')
print(list_ciudades)


#13) ¿Qué pasa si el elemento a eliminar no existe?

#Arroja el siguiente error:
##ValueError: 'Roma' is not in list

#14) Extraer el úlimo elemento de la lista, guardarlo en una variable e imprimirlo

ultima_ciudad = list_ciudades.pop()
print(ultima_ciudad)


#15) Mostrar la lista multiplicada por 4
print(list_ciudades*4)



##                                TUPLAS


#16) Crear una tupla que contenga los números enteros del 1 al 20

tupla = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)

#17) Imprimir desde el índice 10 al 15 de la tupla

print(tupla[10:16])

#18) Evaluar si los números 20 y 30 están dentro de la tupla
variable1 = 20
variable2 = 30

print (variable1 in tupla)
print (variable2 in tupla)



#19) Con la lista creada en el punto 1,
#  validar la existencia del elemento 'París' y si no existe, 
# agregarlo. Utilizar una variable e informar lo sucedido.
print('Wich city are you looking for?')
quested_city = input()
print('searching for ' + str(quested_city + '...'))
print('Result:')

validation_city_registred = (quested_city in list_ciudades)

print(validation_city_registred)

while validation_city_registred == False:

    print(str(quested_city) +' Is not in List. Do you want to add it to list? yes / no ')
    
    want_to_add_city = input()
    if want_to_add_city == 'yes':
            list_ciudades.append(quested_city)
            validation_city_registred = (quested_city in list_ciudades)
            print('Elemento adherido. New list Result:' + str(list_ciudades))
            print('Want to look for another City in list? Yes / No')
            second_city_quest = input()

            if second_city_quest == 'no':
                print('Finished')
                break
                
            else:
                print('Enter new City Name:')
                quested_city = input()

    elif want_to_add_city == 'no':
        print('The quiet list Result:' + str(list_ciudades))
        print('Want to look for another City in list? yes / no')
        second_city_quest = input()
        if second_city_quest == 'yes':
            print('Enter new City Name:')
            quested_city = second_city_quest = input()
            validation_city_registred = (quested_city in list_ciudades)
        else:
            print('Finished')
            break

    while validation_city_registred == True:
        print(str(quested_city) + ' is already in list')
        print('Want to look for another City in list? yes / no')
        second_city_quest = input()
    
        if second_city_quest == 'yes':
            print('Enter new City Name:')
            quested_city = second_city_quest = input()
            validation_city_registred = (quested_city in list_ciudades)

        else:
             print('Finished')
             break


#20) Mostrar la cantidad de veces que se encuentra un elemento específico dentro de la tupla y de la lista


print(tupla.count(10))
print(list_ciudades.count('Barcelona'))

#21) Convertir la tupla en una lista

lista_de_tupla = list(tupla)
print(lista_de_tupla)


#22) Desempaquetar solo los primeros 3 elementos de la tupla en 3 variables

(v1,v2,v3,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_)=tupla
print(v1)
print(v2)
print(v3)

#23) Crear un diccionario utilizando la lista crada en el punto 1, asignandole la clave "ciudad". Agregar tambien otras claves, como puede ser "Pais" y "Continente".
dicc = { 'City': list_ciudades,
    'Pais' : ['España','France','Italia','Italia','Sudafrica','Netherlands','England','Belgium','France','España','Colombia','No es un pais', 'No es un pais'],
    'Numero asignado' : [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]}

print(dicc)

#24) Imprimir las claves del diccionario

print(dicc.keys)

#25) Imprimir las ciudades a través de su clave

print(dicc['City'])
