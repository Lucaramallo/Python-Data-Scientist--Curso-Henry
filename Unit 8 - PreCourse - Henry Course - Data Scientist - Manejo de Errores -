## Manejo de errores

#Con la clase creada en el módulo 7, tener en cuenta 
# diferentes casos en que el código pudiera arrojar error. 
# Por ejemplo, en la creación del objeto recibimos una lista de números
from herramientas import  *


class Herramientas:
    def __init__(self, lista_numeros):
        self.lista = lista_numeros

    def verifica_primo(self):
        for i in self.lista:
            if (self.__verifica_primo(i)):
                print('El elemento', i, 'SI es un numero primo')
            else:
                print('El elemento', i, 'NO es un numero primo')

    def conversion_grados(self, origen, destino):
        for i in self.lista:
            print(i, 'grados', origen, 'son', self.__conversion_grados(i, origen, destino),'grados',destino)
    
    def factorial(self):
        for i in self.lista:
            print('El factorial de ', i, 'es', self.__factorial(i))

    def __verifica_primo(self, nro):
        es_primo = True
        for i in range(2, nro):
            if nro % i == 0:
                es_primo = False
                break
        return es_primo

    def valor_modal(self, menor):
        lista_unicos = []
        lista_repeticiones = []
        if len(self.lista) == 0:
            return None
        if (menor):
            self.lista.sort()
        else:
            self.lista.sort(reverse=True)
        for elemento in self.lista:
            if elemento in lista_unicos:
                i = lista_unicos.index(elemento)
                lista_repeticiones[i] += 1
            else:
                lista_unicos.append(elemento)
                lista_repeticiones.append(1)
        moda = lista_unicos[0]
        maximo = lista_repeticiones[0]
        for i, elemento in enumerate(lista_unicos):
            if lista_repeticiones[i] > maximo:
                moda = lista_unicos[i]
                maximo = lista_repeticiones[i]
        return moda, maximo

    def __conversion_grados(self, valor, origen, destino):
        valor_destino = None
        if (origen == 'celsius'):
            if (destino == 'celsius'):
                valor_destino = valor
            elif (destino == 'farenheit'):
                valor_destino = (valor * 9 / 5) + 32
            elif (destino == 'kelvin'):
                valor_destino = valor + 273.15
            else:
                print('Parámetro de Destino incorrecto')
        elif (origen == 'farenheit'):
            if (destino == 'celsius'):
                valor_destino = (valor - 32) * 5 / 9
            elif (destino == 'farenheit'):
                valor_destino = valor
            elif (destino == 'kelvin'):
                valor_destino = ((valor - 32) * 5 / 9) + 273.15
            else:
                print('Parámetro de Destino incorrecto')
        elif (origen == 'kelvin'):
            if (destino == 'celsius'):
                valor_destino = valor - 273.15
            elif (destino == 'farenheit'):
                valor_destino = ((valor - 273.15) * 9 / 5) + 32
            elif (destino == 'kelvin'):
                valor_destino = valor
            else:
                print('Parámetro de Destino incorrecto')
        else:
            print('Parámetro de Origen incorrecto')
        return valor_destino

    def __factorial(self, numero):
        if(type(numero) != int):
            return 'El numero debe ser un entero'
        if(numero < 0):
            return 'El numero debe ser pisitivo'
        if (numero > 1):
            numero = numero * self.__factorial(numero - 1)
        return numero


#!/usr/bin/env python
# coding: utf-8

# ## Manejo de errores

# 1) Con la clase creada en el módulo 7, tener en cuenta diferentes casos en que el código pudiera arrojar error. Por ejemplo, en la creación del objeto recibimos una lista de números enteros pero ¿qué pasa si se envía otro tipo de dato?

# In[1]:


import sys
sys.path.append(r'C:/Users/Luca\Desktop/VsCode\Data Scientist/PreCourse - Data Scientist - Henry/11/Unit 7 - PreCourse - Henry Course - Data Scientist - Objetos y Clases -.py')


# In[2]:


import herramientas as h


# In[3]:


h1 = h.Herramientas('hola')


# In[4]:


h1 = h.Herramientas([2,3,5,6,2])
print(h1.lista)


# 2) En la función que hace la conversión de grados, validar que los parámetros enviados sean los esperados, de no serlo, informar cuáles son los valores esperados.

# In[5]:


import importlib
importlib.reload(h)


# In[6]:


h1 = h.Herramientas([2,3,5,6,2])


# In[7]:


h1.conversion_grados(1,2)


# In[8]:


h1.conversion_grados('celsius','farenheit')


# 3) Importar el modulo "unittest" y crear los siguientes casos de pruebas sobre la clase utilizada en el punto 2<br>
# Creacion del objeto incorrecta<br>
# Creacion correcta del objeto<br>
# Metodo valor_modal()<br>
# 
# Se puede usar "raise ValueError()" en la creación de la clase para verificar el error. Investigar sobre esta funcionalidad.
import unittest


# In[11]:


class ProbandoMiClase1(unittest.TestCase):
    
    def test_crear_objeto1(self):
        param = 'hola'
        self.assertRaises(ValueError, h.Herramientas, param)
        #self.failUnlessRaises(ValueError, h.Herramientas, param)

    def test_crear_objeto2(self):
        param = [1,2,2,5]
        h1 = h.Herramientas(param)
        self.assertEqual(h1.lista, param)

    def test_valor_modal(self):
        lis = [1,2,1,3]
        h1 = h.Herramientas(lis)
        moda, veces = h1.valor_modal(False)
        moda = [moda]
        moda.append(veces)
        resultado = [1, 2]
        self.assertEqual(moda, resultado)


# In[12]:


unittest.main(argv=[''], verbosity=2, exit=False)

#Se puede usar "raise ValueError()" 
# en la creación de la clase para verificar el error.
#  Investigar sobre esta funcionalidad.

x = int(input('Please enter a positive number:\n'))

try:
    print(f'Square Root of {x} is {math.sqrt(x)}')
except ValueError as ve:
    print(f'You entered {x}, which is not a positive number.')





class ProbandoMiClase(unittest.TestCase):
    
    def test_crear_objeto1(self):
        param = 'hola'
        self.assertRaises(ValueError, h.Herramientas, param)
        #self.failUnlessRaises(ValueError, h.Herramientas, param)

    def test_crear_objeto2(self):
        param = [1,2,2,5]
        h1 = h.Herramientas(param)
        self.assertEqual(h1.lista, param)

    def test_valor_modal(self):
        lis = [1,2,1,3]
        h1 = h.Herramientas(lis)
        moda, veces = h1.valor_modal(False)
        moda = [moda]
        moda.append(veces)
        resultado = [1, 2]
        self.assertEqual(moda, resultado)



#Agregar casos de pruebas para el método verifica_primos() realizando el cambio en la clase, 
# para que devuelva una lista de True o False
#  en función de que el elemento en la posisicón sea o no primo



class ProbandoMiClase2(unittest.TestCase):

    def test_verifica_primos1(self):
        lis = [2,3,8,10,13]
        h1 = h.Herramientas(lis)
        primos = h1.verifica_primo()
        primos_esperado = [True, True, False, False, True]
        self.assertEqual(primos, primos_esperado)


#Agregar casos de pruebas para el método conversion_grados()


class ProbandoMiClase3(unittest.TestCase):

    def test_verifica_conversion1(self):
        lis = [2,3,8,10,13]
        h1 = h.Herramientas(lis)
        grados = h1.conversion_grados('celsius','farenheit')
        grados_esperado = [35.6, 37.4, 46.4, 50.0, 55.4]
        self.assertEqual(grados, grados_esperado)



#Agregar casos de pruebas para el método factorial()


class ProbandoMiClase4(unittest.TestCase):

    def test_verifica_factorial(self):
        lis = [2,3,8,10,13]
        h1 = h.Herramientas(lis)
        factorial = h1.factorial()
        factorial_esperado = [2, 6, 40320, 3628800, 6227020800]
        self.assertEqual(factorial, factorial_esperado)


#Completar el código en las funciones del archivo





#"checkpoint.py" y probarlo a partir de la ejecución del script "tests.py"
