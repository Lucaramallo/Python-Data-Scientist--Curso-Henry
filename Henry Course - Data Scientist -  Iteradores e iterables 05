## Iteradores e iterables

#1) A partir de una lista vacía, utilizar un ciclo while para cargar allí números negativos del -15 al -1

#2) ¿Con un ciclo while sería posible recorrer la lista para imprimir sólo los números pares?

print('Primera Iteracion...')

print('Defina el limite Inferior del intervalo.')
lim_range_inf = int(input())
print('ok. Ahora defina el limite Superior del intervalo.')
lim_range_sup = int(input())


list_ = []
numero_ = int(lim_range_inf)
list_impares = list()
list_pares = list()

while numero_ != int():
    
    if (lim_range_inf <= numero_ <= lim_range_sup): 
        list_.append(numero_)
        print(str(numero_) +', Número cargado exitosamente, lo adherímos a la lista.')
        print(list_)
        espar_solo_si = bool(numero_ % 2 == 0)

        if espar_solo_si :
            print(str(numero_) + ', además es numero par!. Lo vamos a adherir a la lista de pares.')
            list_pares.append(numero_)
            print('Lista numeros pares')
            print(list_pares)
            numero_ += 1
            
        else:
            print(str(numero_) + ', este no es par!. Lo vamos a adherir a la otra lista, lista impares.')
            list_impares.append(numero_)
            print('Lista numeros impares')
            print(list_impares)
            numero_ += 1
            
    else:
        print( str(numero_) + ', No esta dentro del intervalo [' + str(lim_range_inf) + ', ' + str(lim_range_sup) + '].')
        numero_ += 1
        if numero_ > lim_range_sup:
            break

        

print('Lista pares : ')
print((list_pares))
print('Lista impares:')
print(list_impares)


#3) Resolver el punto anterior sin utilizar un ciclo while

print('ahora la segunda Iteracion...')
print('Defina el limite Inferior del intervalo.')
lim_range_inf2 = int(input())
print('ok. Ahora defina el limite Superior del intervalo.')
lim_range_sup2 = int(input())


list_2 = []
numero_2 = int(lim_range_inf2)
list_impares2 = list()
list_pares2 = list()

for numero_2 in range(lim_range_inf2,lim_range_sup2):

    if (lim_range_inf2 <= numero_2 <= lim_range_sup2): 
        list_2.append(numero_2)
        print(str(numero_2) +', Número cargado exitosamente, lo adherímos a la lista.')
        print(list_2)
        espar_solo_si = bool(numero_2 % 2 == 0)

        if espar_solo_si :
            print(str(numero_2) + ', además es numero par!. Lo vamos a adherir a la lista de pares.')
            list_pares2.append(numero_2)
            print('Lista numeros pares')
            print(list_pares2)
            numero_2 += 1
            
        else:
            print(str(numero_2) + ', este no es par!. Lo vamos a adherir a la otra lista, lista impares.')
            list_impares2.append(numero_2)
            print('Lista numeros impares')
            print(list_impares2)
            numero_2 += 1
            
    else:
        print( str(numero_2) + ', No esta dentro del intervalo [' + str(lim_range_inf2) + ', ' + str(lim_range_sup2) + '].')
        numero_2 += 1
        if numero_2 > lim_range_sup2:
            break

        

print('Lista pares :')
print((list_pares2))
print('Lista impares:')
print(list_impares2)



#4) Utilizar el iterable para recorrer sólo los primeros 3 elementos

elemento = int()


while (0 <= elemento <= 3):
    item_lista_print_pares2 = list_pares2[elemento]
    print(item_lista_print_pares2)
    item_lista_print_impares2 = list_impares2[elemento]
    print(item_lista_print_impares2)
    elemento += 1
    

#5) Utilizar la función **enumerate** para obtener dentro del iterable, 
# tambien el índice al que corresponde el elemento


for elemento, c in enumerate(list_impares2):
    print(elemento, c)
    
for elemento, d in enumerate(list_pares2):
    print(elemento, c)





#6) Dada la siguiente lista de números enteros entre 1 y 20, 
# crear un ciclo donde se completen los valores faltantes: lista = [1,2,5,7,8,10,13,14,15,17,20]

lista_del_1_al_20 = [1,2,5,7,8,10,13,14,15,17,20]

i = 0
for i in range(lista_del_1_al_20[1],lista_del_1_al_20[-1]):

    while i != lista_del_1_al_20[i]:
        lista_del_1_al_20.insert(i,i)
        print('Nueva lista: ' + str(lista_del_1_al_20))

print('process endded')



#7) La sucesión de Fibonacci es un listado de números que sigue la fórmula: <br>
#n<sub>0</sub> = 0<br>
#n<sub>1</sub> = 1<br>
#n<sub>i</sub> = n<sub>i-1</sub> + n<sub>i-2</sub><br>
#Crear una lista con los primeros treinta números de la sucesión.<br>

fibo = [0,1]
n = 2
while(n < 30):
    fibo.append(fibo[n-1]+fibo[n-2])            #ecuacion de Fibonacci.
    n += 1
print(fibo)


#8) Realizar la suma de todos elementos de la lista del punto anterior

print(sum(fibo))


#9) La proporción aurea se expresa con una proporción matemática que nace el número irracional 
# Phi= 1,618… que los griegos llamaron número áureo.
#  El cuál se puede aproximar con la sucesión de Fibonacci.
#  Con la lista del ejercicio anterior, 
#  imprimir el cociente de los últimos 5 pares
#  de dos números contiguos:<br>

#Donde i es la cantidad total de elementos<br>

#n<sub>i-1</sub> / n<sub>i</sub><br>
#n<sub>i-2</sub> / n<sub>i-1</sub><br>
#n<sub>i-3</sub> / n<sub>i-2</sub><br>
#n<sub>i-4</sub> / n<sub>i-3</sub><br>
#n<sub>i-5</sub> / n<sub>i-4</sub><br>

primeros = 15
n = primeros - 5
while(n < primeros):
    print(round(fibo[n]/fibo[n-1],7))
    n += 1


#10) A partir de la variable cadena ya dada, mostrar en qué posiciones aparece la letra "n"<br>
#cadena = 'Hola Mundo. Esto es una practica del lenguaje de programación Python'
cadena =  'Hola Mundo. Esto es una practica del lenguaje de programación Python'

for i, c in enumerate(cadena):
    if c == 'n':
        print(i)


#11) Crear un diccionario e imprimir sus claves utilizando un iterador


dicc = {  

'Ciudad':           ['Buenos Aires','Caracas','Bogotá','Lisboa','Roma'], 
'País':             ['Argentina','Venezuela','Colombia','Portugal','Italia'], 
'Continente' :      ['América','América','América','Europa','Europa']

}

for v in dicc:
    print(v)



#12) Convertir en una lista la variable "cadena" del punto 10 y luego recorrerla con un iterador 


cadena =  'Hola Mundo. Esto es una practica del lenguaje de programación Python'
lista_de_la_cadena = []
listado_letras_n_encontradas = []
for i, c in enumerate(cadena):
    lista_de_la_cadena.extend([i,c])
    if c == 'n':
        listado_letras_n_encontradas.extend([i,c])
        print(i)

print(lista_de_la_cadena)
print(listado_letras_n_encontradas)




#13) Crear dos listas y unirlas en una tupla utilizando la función zip
list1 = [1,2]
list2 = [3,4]

c = zip (list1,list2)
print(type(c))
print(c)


#14) A partir de la siguiente lista de números, crear una nueva sólo si el número es divisible por 7<br>
#lis = [18,21,29,32,35,42,56,60,63,71,84,90,91,100]

lis = [18,21,29,32,35,42,56,60,63,71,84,90,91,100]
lis2 = list(i for i in lis if (i % 7 == 0 ))
print (lis2)

#15) A partir de la lista de a continuación, 
# contar la cantidad total de elementos que contiene, 
# teniendo en cuenta que un elemento de la lista podría ser otra lista:<br>


lis = [[1,2,3,4],'rojo','verde',[True,False,False],['uno','dos','tres']]

cantidad = 0
for elemento in lis:
    if (type(elemento) == list):
        cantidad += len(elemento)
    else:
        cantidad += 1
print('La cantidad total de elementos es', cantidad)



#16) Tomar la lista del punto anterior y convertir cada elemento en una lista si no lo es

lis = [[1,2,3,4],'rojo','verde',[True,False,False],['uno','dos','tres']]
type(lis)



for indice, elemento in enumerate(lis):
    if (type(elemento) != list):
        lis[indice]=[elemento]
print(lis)
